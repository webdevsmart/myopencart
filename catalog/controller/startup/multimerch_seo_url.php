<?php
class ControllerStartupMultimerchSeoUrl extends Controller {
	/** @var array MultiMerch cache data. */
	private $cache_data = array();

	/** @var string Seller's store slug, set in MultiMerch settings by admin. */
	private $msconf_store_slug;

	/** @var string Sellers list slug, set in MultiMerch settings by admin. */
	private $msconf_sellers_slug;

	/** @var string Products list slug, set in MultiMerch settings by admin. */
	private $msconf_products_slug;

	/**
	 * ControllerStartupMultimerchSeoUrl constructor.
	 *
	 * @param	$registry
	 */
	public function __construct($registry) {
		parent::__construct($registry);

		$this->cache_data = $this->_getCacheData();

		$this->msconf_store_slug = !empty($this->config->get('msconf_store_slug')) ? $this->config->get('msconf_store_slug') : 'store';
		$this->msconf_sellers_slug = !empty($this->config->get('msconf_sellers_slug')) ? $this->config->get('msconf_sellers_slug') : 'sellers';
		$this->msconf_products_slug = !empty($this->config->get('msconf_products_slug')) ? $this->config->get('msconf_products_slug') : 'products';
	}

	/**
	 * Decodes passed SEO url into OpenCart route, or encodes passed OpenCart route into SEO url.
	 *
	 * Accepts data passed by GET method. Possible keys:
	 * - '_route_': encoded SEO url link;
	 * - 'route': OpenCart route.
	 *
	 * @return	string	$this->request->get['route']	OpenCart route.
	 */
	public function index() {
		/** Add Multimerch SEO controller into OC @see Url::$rewrite array. */
		if ($this->config->get('msconf_config_seo_url_enable'))
			$this->url->addRewrite($this);

		if (!empty($this->request->get['route'])) {
			if (!$this->_validateException($this->request->get['route'])) {
				// if route is in a list of exceptions, do nothing
				return;
			} elseif (in_array($this->request->get['route'], $this->cache_data['controllers'])) {
				// 301 redirect to autogenerated SEO url
				$this->_generateSeoUrlByRoute($this->request->get['route']);
			}
		} elseif (!empty($this->request->get['_route_']) && $this->_validateException($this->request->get['_route_'])) {
			// Decode passed SEO url
			$this->decodeUrl($this->request->get);
		}
	}

	/**
	 * Rewrites all links on a page.
	 *
	 * @param	string	$link	Incoming non-SEO url link.
	 * @return	string			Returns SEO url link if .htaccess exists, otherwise returns incoming non-SEO url link.
	 */
	public function rewrite($link) {
		// @todo 9.0: check nginx, apache config and htaccess
		return $this->encodeUrl($link);
	}

	/**
	 * Encodes non-SEO url link into SEO url link.
	 *
	 * @param	string	$link	Incoming non-SEO url link.
	 * @return	string			SEO url link, that is encoded non-SEO url link.
	 */
	protected function encodeUrl($link)	{
		$data = $seo_url_parts = array();
		$url_info = parse_url(str_replace('&amp;', '&', $link));
		parse_str($url_info['query'], $data);

		if (!empty($data['route']) && !$this->_validateException($data['route']))
			return $link;

		$route = $data['route'];
		$route_parts = explode('/', $route);

		// Stage 1: get seo url from database by url data
		if (isset($this->cache_data['ms_dynamic_seo_route_map'][$route]) && (!empty(array_intersect(array_keys($data), (array)$this->cache_data['ms_dynamic_seo_route_map'][$route])) || empty($this->cache_data['ms_dynamic_seo_route_map'][$route]))) {
			foreach ($data as $key => $value) {
				if (!empty($data['route'])) {

					switch ($route) {
						case 'seller/catalog-seller':
						case 'seller/catalog-seller/profile':
						case 'seller/catalog-seller/products':
							$seo_url_parts[] = $this->msconf_sellers_slug;
							break;

						case 'product/product':
							foreach (array('path', 'search', 'limit', 'sort', 'order') as $item) {
								if (isset($data[$item]))
									unset($data[$item]);
							}

							$seo_url_parts[] = $this->msconf_products_slug;
							break;
					}

					unset($data['route']);
				}

				$query_parts = array();

				switch ($key) {
					case 'path':
						// Unset categories from SEO url on individual product pages
						if ($route == 'product/product')
							continue 2;

						$categories = explode('_', $value);
						foreach ($categories as $category_id) {
							$query_parts[] = 'category_id=' . $category_id;
						}
						break;

					case 'ms_category_id':
						$ms_categories = explode(',', $this->MsLoader->MsCategory->getMsCategoryPath($data['ms_category_id']));
						foreach ($ms_categories as $ms_category_id) {
							$query_parts[] = 'ms_category_id=' . $ms_category_id;
						}
						break;

					default:
						$query_parts[] = $key . '=' . $value;
						break;
				}

				if (empty($query_parts))
					return $link;

				foreach ($query_parts as $query) {
					if ($keyword = array_search($query, $this->cache_data['db'])) {
						$seo_url_parts[] = $keyword;
						unset($data[$key]);
					}
				}

				// Add seller store slug at the end of corresponding url
				if ((string)$route === 'seller/catalog-seller/products' && (string)$key === 'seller_id')
					$seo_url_parts[] = $this->msconf_store_slug;
			}
		}

		// Stage 2: get SEO url from predefined $ms_seo_url
		if (empty($seo_url_parts)) {
			// Check keyword existence
			if ($keyword = array_search($route, $this->cache_data['ms_seo_url'])) {
				$seo_url_parts[] = $keyword;

			// Check wildcard
			} elseif (in_array($route_parts[0] . '/*', $this->cache_data['ms_seo_url'])) {
				foreach ($route_parts as $route_part) {
					$seo_url_parts[] = $route_part;
				}
			}
		}

		$seo_url = trim(implode('/', $seo_url_parts), '/');

		if ($seo_url || (string)$route === 'common/home') {
			if (isset($data['route']))
				unset($data['route']);

			$seo_url = $this->config->get($this->request->server['HTTPS'] ? 'config_ssl' : 'config_url') . (isset($url_info['port']) ? ':' . $url_info['port'] : '') . $seo_url;

			if (substr($seo_url, -1) !== '/')
				$seo_url .= '/';

			// If other GET parameters exist
			if (count($data))
				$seo_url .= '?' . urldecode(http_build_query($data, '', '&amp;'));

			return $seo_url;
		}

		return $link;
	}

	/**
	 * Decodes SEO url link into OpenCart route.
	 *
	 * @param	array	$request_get	GET parameters.
	 */
	protected function decodeUrl(&$request_get) {
		$_route_ = $request_get['_route_'];
		unset($request_get['_route_']);

		$parts = explode('/', $_route_);

		// remove any empty arrays from trailing
		if (utf8_strlen(end($parts)) == 0)
			array_pop($parts);

		// Stage 1: get route by parts
		foreach ($parts as $part) {
			/**
			 * If route contains keyword used as a slug for sellers list, seller's store or products list, skip searching
			 * it in the database.
			 */
			if (in_array($part, array($this->msconf_store_slug, $this->msconf_sellers_slug, $this->msconf_products_slug)))
				continue;

			/**
			 * Search the keyword and a corresponding query in the database, and get request parameters.
			 */
			if (!empty($this->cache_data['db'][$part])) {
				$url = explode('=', $this->cache_data['db'][$part]);

				switch ((string)$url[0]) {
					case 'seller_id':
					case 'product_id':
					case 'manufacturer_id':
					case 'information_id':
					case 'ms_category_id':
						$request_get[$url[0]] = $url[1];
						break;

					case 'category_id':
						$request_get['path'] = isset($request_get['path']) ? $request_get['path'] . '_' . $url[1] : $url[1];
						break;

					default:
						$request_get['route'] = $url[0];
						break;
				}
			} else {
				/**
				 * Search the keyword and a corresponding query in $this->cache_data['ms_seo_url'], and get request
				 * parameters.
				 */
				// Check keyword existence
				if (!empty($this->cache_data['ms_seo_url'][trim($_route_, '/')])) {
					$request_get['route'] = $this->cache_data['ms_seo_url'][trim($_route_, '/')];

				// Check wildcard
				} elseif (in_array(trim($parts[0] . '/*', '/'), $this->cache_data['ms_seo_url'])) {
					$request_get['route'] = implode('/', $parts);

				// Return 404 if occurrences not found
				} else {
					$request_get['route'] = 'error/not_found';
					break;
				}
			}
		}

		// Stage 2: get route by url parameters
		if (!isset($request_get['route'])) {
			$route = 'error/not_found';

			// @todo 9.0: create templates for routes
			if (isset($request_get['product_id'])) {
				$route = 'product/product';
			} elseif (isset($request_get['path'])) {
				$route = 'product/category';
			} elseif (isset($request_get['manufacturer_id'])) {
				$route = 'product/manufacturer/info';
			} elseif (isset($request_get['information_id'])) {
				$route = 'information/information';
			} elseif (in_array($this->msconf_sellers_slug, $parts)) {
				$route = 'seller/catalog-seller';

				if (isset($request_get['seller_id']))
					$route = in_array($this->msconf_store_slug, $parts) ? 'seller/catalog-seller/products' : 'seller/catalog-seller/profile';
			}

			$request_get['route'] = $route;
		}

		unset($request_get['_route_']);
	}

	/**
	 * Generates SEO url by passed route and perform 301 redirect.
	 *
	 * @param	array	$route		GET parameter.
	 */
	private function _generateSeoUrlByRoute($route) {
		/** Sanitize site base just in case */
		$config_base = $this->config->get(!empty($this->request->server['HTTPS']) && in_array($this->request->server['HTTPS'], array('on', '1')) ? 'config_ssl' : 'config_url');
		$base = substr($config_base, 0, $this->_strposOffset('/', $config_base, 3) + 1);

		/** Incoming OpenCart non-SEO url */
		$incoming_url = str_replace('&amp;', '&', $base . ltrim($this->request->server['REQUEST_URI'], '/'));

		/** Generated SEO url. $this->url->link() calls @see ControllerStartupMultimerchSeoUrl::rewrite() */
		$seo_url = str_replace('&amp;', '&', $this->url->link($route, $this->_getQueryString(array('route')), $this->config->get('config_secure')));

		if (rawurldecode($incoming_url) != rawurldecode($seo_url))
			$this->response->redirect($seo_url, 301);
	}

	/**
	 * Creates MultiMerch SEO cache data.
	 *
	 * @return	array	$cache_data		Array contains dynamic SEO route map, MultiMerch SEO urls, exceptions, SEO urls
	 * 									from database, and the list of all controllers at a current setup.
	 */
	private function _getCacheData() {
		$cache_data = $this->cache->get('multimerch_seo_url');
		if (!$cache_data) {
			$cache_data = array(
				'ms_dynamic_seo_route_map' => array(),
				'ms_seo_url' => array(),
				'ms_seo_url_exceptions' => array(),
				'db' => array(),
				'controllers' => array(),
			);

			/**
			 * Map all routes to the objects (route => keys), for which SEO urls must be dynamically generated.
			 * ($data['route'] == 'product/product' && $key == 'product_id') || (($data['route'] == 'product/manufacturer/info' || $data['route'] == 'product/product') && $key == 'manufacturer_id') || ($data['route'] == 'information/information' && $key == 'information_id') || ($data['route'] == 'seller/catalog-seller/profile' && $key == 'seller_id') || ($data['route'] == 'seller/catalog-seller/products' && $key == 'seller_id' )
			 */
			$cache_data['ms_dynamic_seo_route_map'] = array(
				'product/product'					=> array('product_id', 'manufacturer_id'),
				'product/manufacturer/info'			=> array('manufacturer_id'),
				'information/information'			=> array('information_id'),
				'seller/catalog-seller'				=> array(),
				'seller/catalog-seller/profile'		=> array('seller_id'),
				'seller/catalog-seller/products'	=> array('seller_id'),
				'product/category'					=> array('path')
			);

			/**
			 * Seo urls for other system pages
			 */
			$cache_data['ms_seo_url'] = array(
				'account' 			=> 'account/account',
				'account/' 			=> 'account/*',
				'affiliate' 		=> 'affiliate/*',
				'brands' 			=> 'product/manufacturer',
				'cart' 				=> 'checkout/cart',
				'checkout' 			=> 'checkout/checkout',
				'compare-products' 	=> 'product/compare',
				'contact-us' 		=> 'information/contact',
				'customer-review'	=> 'customer/review/create',
				'gift-vouchers' 	=> 'checkout/voucher',
				'search' 			=> 'product/search',
				'seller' 			=> 'seller/*',
				'sitemap' 			=> 'information/sitemap',
				'specials' 			=> 'product/special'
			);

			// @todo 9.0: add brands/* into ms_seo_url

			/**
			 * Map all routes for the objects, for which SEo urls must
			 */
			// Route exceptions that don't have SEO url link
			$cache_data['ms_seo_url_exceptions'] = array(
				'common/language/language',
				'customer/review/jxAddUpload',
				'multimerch/account_order/jxUploadAttachment',
				'multimerch/conversation/jxUploadAttachment',
				'seller/account-import/jxUploadFile',
				'seller/account-order/invoice',
				'seller/account-payment/create',
				'seller/account-product/jxUploadImages',
				'seller/account-product/jxUploadDownloads',
				'seller/account-profile/jxUploadSellerAvatar',
				'seller/account-setting/jxUploadSellerLogo'
			);

			/**
			 * Get all SEO urls from OpenCart DB (table `url_alias`)
			 */
			$query = $this->db->query("SELECT `keyword` as 'keyword', `query` FROM " . DB_PREFIX . "url_alias ORDER BY url_alias_id");
			foreach ($query->rows as $row) {
				$cache_data['db'][$row['keyword']] = $row['query'];
			}

			/**
			 * Get all the controllers at a current setup, so we know for which routes SEO urls should be automatically
			 * generated.
			 */
			$path = array(DIR_APPLICATION . 'controller/*');

			while (count($path) != 0) {
				$next = array_shift($path);

				foreach (glob($next) as $file) {
					// If directory add to path array
					if (is_dir($file))
						$path[] = $file . '/*';

					if (is_file($file)) {
						$file = str_replace(DIR_APPLICATION . 'controller/', '', $file);
						// Route without extension
						$cache_data['controllers'][] =  substr($file, 0, strrpos($file, '.'));
					}
				}
			}

			$this->cache->set('multimerch_seo_url', $cache_data);
		}

		return $cache_data;
	}

	/**
	 * Validates passed link is not in MultiMerch exceptions.
	 *
	 * @param	string	$link	Url link.
	 * @return	bool			If link is not in exceptions, returns true, otherwise - false.
	 */
	private function _validateException($link) {
		return !in_array($link, $this->cache_data['ms_seo_url_exceptions']);
	}

	/**
	 * Gets length of a substring, ending at {$occurrence}-th occurrence of a character {$needle} in a string {$haystack}.
	 *
	 * @param	string		$needle			Character or symbol searched in a string.
	 * @param	string		$haystack		Full string.
	 * @param	int			$occurrence		Sequential number of $needle occurrence in a string.
	 * @return	bool|int					Substring length or false if no occurrences were found.
	 */
	private function _strposOffset($needle, $haystack, $occurrence) {
		$arr = explode($needle, $haystack);

		switch($occurrence) {
			case $occurrence == 0:
			case $occurrence > max(array_keys($arr)):
				return false;

			default:
				return strlen(implode($needle, array_slice($arr, 0, $occurrence)));
		}
	}

	/**
	 * Generates query from passed GET parameters.
	 *
	 * @param	array	$exclude	GET parameters to be excluded from query.
	 * @return	string				Generated query.
	 */
	private function _getQueryString($exclude = array()) {
		if (!is_array($exclude))
			$exclude = array();

		return urldecode(http_build_query(array_diff_key($this->request->get, array_flip($exclude))));
	}
}
